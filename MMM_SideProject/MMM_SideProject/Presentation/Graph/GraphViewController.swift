//
//  GraphViewController.swift
//  MMM_SideProject
//
//  Created by Í∞ïÎåÄÌõà on 1/25/25.
//

import UIKit
import RxSwift
import RxCocoa
import SwiftUI
import RxDataSources
import DGCharts

class GraphViewController: UIViewController {
    
    var disposeBag : DisposeBag = DisposeBag()
    var viewModel : GraphViewModelInterface!
    
    let dataSource = RxTableViewSectionedAnimatedDataSource<SingleSectionModel>(configureCell: { _, tableView, indexPath, item in
        guard let cell = tableView.dequeueReusableCell(withIdentifier: DetailTableViewCell.identifier, for: indexPath) as? DetailTableViewCell else {
            return UITableViewCell()
        }
        
        cell.configure(item: item)
        cell.contentView.backgroundColor = UIColor(hexCode: ColorConst.mainColorString, alpha: 0.05)
        return cell
    })
    
    lazy var dismissButton : UIButton = {
        let button = UIButton(frame: CGRect(x: 0, y: 0, width: 10, height: 12))
        button.setImage(UIImage(systemName: "chevron.left"), for: .normal)
        button.tintColor = UIColor(hexCode: ColorConst.mainColorString)
        return button
    }()
    
    lazy var dismissButtonItem = UIBarButtonItem(customView: dismissButton)
    
    let pieChartView : PieChartView = {
        let p = PieChartView(frame: .zero)
        p.translatesAutoresizingMaskIntoConstraints = false
        return p
    }()
    
    let buttonCollectionView : UICollectionView = {
        let flowLayout = UICollectionViewFlowLayout()
        flowLayout.scrollDirection = .horizontal
        flowLayout.itemSize = CGSize(width: 60, height: 40)
        flowLayout.minimumInteritemSpacing = 10
        flowLayout.minimumLineSpacing = 10
        let c = UICollectionView(frame: .zero, collectionViewLayout: flowLayout)
        c.translatesAutoresizingMaskIntoConstraints = false
        c.showsHorizontalScrollIndicator = false
        return c
    }()
    
    lazy var headerView : UIView = UIView(frame: CGRect(x: 0, y: 0, width: view.frame.width, height: 300))
    
    let tableView : UITableView = {
        let tv = UITableView()
        tv.translatesAutoresizingMaskIntoConstraints = false
        return tv
    }()
    
    let navigationTitleButton : UIButton = {
        let b = UIButton()
        b.translatesAutoresizingMaskIntoConstraints = false
        b.setTitleColor(.blackColor, for: .normal)
        b.titleLabel?.font = UIFont(size: 14.0)
        return b
    }()
    
    init(viewModel : GraphViewModelInterface) {
        self.viewModel = viewModel
        super.init(nibName: nil, bundle: nil)
    }
    
    required init?(coder: NSCoder) {
        super.init(coder: coder)
        print("GraphViewController - Initializer ÏóêÎü¨")
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setNavigationController()
        setDelegate()
        setLayout()
        setReactive()
    }
    
    func setNavigationController() {
        self.navigationItem.leftBarButtonItem = dismissButtonItem
        self.navigationItem.titleView = navigationTitleButton
    }
    
    func setDelegate() {
        pieChartView.delegate = self
        
        buttonCollectionView.dataSource = nil
        tableView.dataSource = nil
        
        tableView.rowHeight = 65
        tableView.separatorStyle = .none
        
        buttonCollectionView.register(TypeButtonCVCell.self, forCellWithReuseIdentifier: TypeButtonCVCell.identifier)
        tableView.register(DetailTableViewCell.self, forCellReuseIdentifier: DetailTableViewCell.identifier)
    }
    
    func setLayout() {
        self.view.backgroundColor = .white
        
        headerView.addSubview(pieChartView)
        self.view.addSubview(buttonCollectionView)
        self.view.addSubview(tableView)
        
        NSLayoutConstraint.activate([
            buttonCollectionView.leadingAnchor.constraint(equalTo: self.view.leadingAnchor, constant: 20),
            buttonCollectionView.trailingAnchor.constraint(equalTo: self.view.trailingAnchor, constant: -20),
            buttonCollectionView.topAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.topAnchor),
            buttonCollectionView.heightAnchor.constraint(equalToConstant: 50),
            
            pieChartView.leadingAnchor.constraint(equalTo: self.headerView.leadingAnchor),
            pieChartView.trailingAnchor.constraint(equalTo: self.headerView.trailingAnchor),
            pieChartView.topAnchor.constraint(equalTo: self.headerView.topAnchor),
            pieChartView.heightAnchor.constraint(equalToConstant: 300),
            
            tableView.leadingAnchor.constraint(equalTo: self.view.leadingAnchor, constant: 30),
            tableView.trailingAnchor.constraint(equalTo: self.view.trailingAnchor, constant: -30),
            tableView.topAnchor.constraint(equalTo: self.buttonCollectionView.bottomAnchor, constant: 10),
            tableView.bottomAnchor.constraint(equalTo: self.view.bottomAnchor),
        ])
        
        tableView.tableHeaderView = headerView
    }
    
    
    func setReactive() {
        // MARK: - Coordinator ÌôîÎ©¥ Ï†ÑÌôò Î∞îÏù∏Îî©
        dismissButton.rx.tap
            .observe(on: MainScheduler.instance)
            .bind(to: viewModel.dismissButtonObserver)
            .disposed(by: disposeBag)
        
        // MARK: - Entity TableView Î∞îÏù∏Îî©
        viewModel.entityDataObservable
            .observe(on: MainScheduler.instance)
            .map { [SingleSectionModel(items: $0)] }
            .bind(to: tableView.rx.items(dataSource: dataSource))
            .disposed(by: disposeBag)
        
        // MARK: - Button ÌÉÄÏûÖ ÎùºÎ≤® Î∞îÏù∏Îî©
        viewModel.typeButtonDataObservable
            .observe(on: MainScheduler.instance)
            .bind(to: buttonCollectionView.rx.items(cellIdentifier: TypeButtonCVCell.identifier, cellType: TypeButtonCVCell.self)) { [weak self] (index, item, cell) in
                guard let self = self else { return }
                cell.configure(item: item, viewModel : viewModel)
                // TODO: - button Click Ïä§Ìä∏Î¶º Í±∏Ïñ¥Ï§òÏïº Ìï®.
        }.disposed(by: disposeBag)
        
        // MARK: - graphData Î∞îÏù∏Îî©
        viewModel.graphDataObservable
            .observe(on: MainScheduler.instance)
            .subscribe { [weak self] eventList in
                guard let eventList = eventList.element else { return }
                guard let self = self else { return }
                setPieChart(eventList: eventList)
            }.disposed(by: disposeBag)
        
        viewModel.dateObservable
            .observe(on: MainScheduler.instance)
            .bind(to: navigationTitleButton.rx.title())
            .disposed(by: disposeBag)
        
        navigationTitleButton.rx.tap
            .observe(on: MainScheduler.instance)
            .subscribe { [weak self] _ in
                guard let self = self else { return }
                let toastVC = graphDateToastView(viewModel: viewModel)
                addChild(toastVC)
                view.addSubview(toastVC.view)
                toastVC.didMove(toParent: self)
            }.disposed(by: disposeBag)
    }
}

// MARK: - ChartViewDelegate
extension GraphViewController : ChartViewDelegate {
    func setPieChart(eventList : [(String, Double)]) {
        // TODO: - CollectionView Element ÌÅ¥Î¶≠ ÏöîÏÜåÏóê Îß§ÌïëÌï¥Ïïº Ìï®.
        /// Example.
        // TODO: - COllectionView ÏùåÏ£º ÌÅ¥Î¶≠.
        // TODO: - ÏùåÏ£ºÎùºÎäî Category Î•º ViewModelÏóêÏÑú Î∞õÏùå
        // TODO: - ViewModelÏóêÏÑú ÏòµÏ†ÄÎ≤ÑÎ•º ÌÜµÌï¥ÏÑú TableView Ïä§Ìä∏Î¶ºÏóê ÎÇ†Î¶º.
        
        var entryList : [PieChartDataEntry] = []
        
        // Î∞õÏïÑÏò® ÎîïÏÖîÎÑàÎ¶¨Î•º entryListÎ°ú Î≥ÄÌôòÌïòÎäî Í≥ºÏ†ï
        eventList.forEach {
            entryList.append(PieChartDataEntry(value: $0.1, label: $0.0))
        }
        
        let dataSet = PieChartDataSet(entries: entryList, label: "")
        
        // üé® Í∞Å Ï°∞Í∞ÅÎ≥Ñ ÏÉâÏÉÅ
        dataSet.colors = ChartColorTemplates.vordiplom()
        dataSet.colors = dataSet.colors.map { $0.withAlphaComponent(0.4) }
        dataSet.sliceSpace = 5
        
        var buttonDataList = [(String, UIColor)]()
        
        // MARK: - typeButtonData Ïä§Ìä∏Î¶ºÏùÑ ÎçòÏ†∏Ï§å.
        // TODO: - ÏÉâ Î°úÏßÅ Î≥ÄÍ≤ΩÌï¥Ïïº Ìï®.
        for i in 0..<eventList.count {
            buttonDataList.append((eventList[i].0, dataSet.colors.randomElement() ?? .mainColor))
        }
        
        viewModel.typeButtonDataObserver.onNext(buttonDataList)
        
        // ü•Ø ÎèÑÎÑõ ÌòïÌÉú ÎßåÎì§Í∏∞ (ÏõêÌòï ÎπÑÏú® Ï°∞Ï†ï)
        pieChartView.holeRadiusPercent = 0.25  // Ï§ëÏïô Íµ¨Î©ç ÌÅ¨Í∏∞
        pieChartView.transparentCircleRadiusPercent = 0.65  // Î∞òÌà¨Î™ÖÌïú Ïõê ÌÅ¨Í∏∞
        
        // Íµ¨Î©ç Í∑ºÏ≤òÏóê ÏûàÎäî Ìù∞ÏÉâ ÏóÜÏï†Í∏∞
        pieChartView.transparentCircleColor = .clear
        
        // üè∑Ô∏è ÎùºÎ≤® ÏúÑÏπò ÏÑ§Ï†ï (ÎèÑÎÑõ Ï∞®Ìä∏Ïóê Ï†ÅÌï©ÌïòÍ≤å)
        dataSet.xValuePosition = .insideSlice  // ÎùºÎ≤®ÏùÑ ÎÇ¥Î∂ÄÏóê ÌëúÏãú
        dataSet.yValuePosition = .insideSlice  // Í∞íÎèÑ ÎÇ¥Î∂ÄÏóê ÌëúÏãú
        
        // ÌÅ¥Î¶≠ÏãúÏóê Ìö®Í≥º Ï†úÍ±∞
        dataSet.selectionShift = 0
        
        // ÎùºÎ≤® Ïä§ÌÉÄÏùº
        let data = PieChartData(dataSet: dataSet)
        let formatter = NumberFormatter()
        formatter.numberStyle = .percent
        formatter.maximumFractionDigits = 0
        formatter.multiplier = 1
        data.setValueFormatter(DefaultValueFormatter(formatter: formatter))
        
        // ÎùºÎ≤® ÏÉâÏÉÅ
        data.setValueTextColor(.blackColor.withAlphaComponent(0.7))
        data.setValueFont(UIFont(size: 16.0)) // ÎùºÎ≤® Ìè∞Ìä∏
        
        pieChartView.data = data
        
        // Í∏∞ÌÉÄ ÏÑ§Ï†ï
        pieChartView.legend.enabled = false  // Î≤îÎ°Ä Ïà®Í∏∞Í∏∞
        pieChartView.animate(xAxisDuration: 1.0, yAxisDuration: 1.0)  // Ïï†ÎãàÎ©îÏù¥ÏÖò Ìö®Í≥º
    }
}
